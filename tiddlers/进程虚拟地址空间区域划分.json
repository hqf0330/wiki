[
    {
        "created": "20240718121520931",
        "creator": "Mason",
        "text": "! 前提：x86 32位linux环境下\n首先程序是在磁盘上的，任何编程语言都会产生两种东西：指令和数据。如果CPU要调用的话，首先要将数据从磁盘加载到内存中，当然不会直接加载到物理内存。linux系统会将当前进程分配一个2^^32^^大小的一块''进程虚拟空间''，也就是4G\n\n> ''虚拟：不存在，但是被看见了''\n\n! 内存图描述\n\n在分配出来的4G大小的空间中会被主要分为两个空间：[[user space|详细解析user space]]和[[Kernal Space|详细解析kernal space]]，然后对于不同的空间又会继续细分，每块都有各自的功能\n\n* ''预留空间: ''这部分是在[[user space|详细解析user space]]的，不可读写，操作系统会预留一部分地址空间用于自己的数据结构、系统调用栈还有内核线程等。有时候会作为安全措施存在，比如[[user space|详细解析user space]]和[[Kernal Space|详细解析kernal space]]之间的空洞，防止内存溢出\n* ''text: ''在[[user space|详细解析user space]]中存放指令，不允许来写，这是为了保护程序的执行代码不被意外改变，提高程序的稳定性和安全性\n* ''rodata: ''在[[user space|详细解析user space]]中存放比如字面量，只能是''read only''，就比如修改字符串字面量的字符，这个是不可行的\n* ''data: '' 存放所有已初始化的全局变量和静态变量。这意味着，在程序开始执行之前，这些变量已经被赋予了初始值。这些变量占用的空间在程序加载时就已经被分配，并且在程序运行期间保持不变\n* ''bss: '' 存放所有未初始化的全局变量和静态变量。这些变量在程序开始执行时并没有显式地初始化，因此它们不占用实际的磁盘空间，只有当程序运行时，才会为它们分配内存。在程序运行的时候分配内存，并且被全部置零\n* ''[[heap|程序运行时的heap]]: '' 从低地址都高地址增长\n* ''shared libraries: '' 在linux中就是.so文件，在windows中则是.dll文件\n* ''[[stack|程序运行时的stack]]: ''\n* ''命令行参数和环境变量: '' ",
        "tags": "C++",
        "title": "进程虚拟地址空间区域划分",
        "modified": "20240719101819203",
        "modifier": "Mason",
        "icon": "🎃",
        "page-cover#bg-blur": "8px"
    }
]